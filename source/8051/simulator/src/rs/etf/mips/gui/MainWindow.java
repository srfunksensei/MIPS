/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on 05.03.2011., 16.31.41
 */
package rs.etf.mips.gui;

import javax.swing.JButton;
import rs.etf.mips.utilities.*;

/**
 *
 * @author MB
 */
public class MainWindow extends javax.swing.JFrame {

    final private int SIZE = 1000;
    public Product[] products;
    final private String msgWAITING = "  WAITING ";
    final private String msgPROGRAMMING = "  PROGRAMMING ";
    final private String msgERROR = "  ERROR  ";
    final private String msgFUNCTION = " FUNCTION MODE ";
    final private String msgTOTAL = "  TOTAL ";
    final private String msgNEW_ID = "  NEW ID ";
    final private String msgACCOUNT = "  ACCOUNT ";
    final private String msgNEW_AMOUNT = "  NEW AMOUNT";
    final private String msgAMOUNT = " INSERT AMOUNT";
    final private String msgNO_ID = " NO SUCH PRODUCT ID";
    private boolean fun_mode,
            star_pressed,
            minus_pressed,
            product_selected,
            progOK,
            error_detected,
            time_show,
            printer_printed_account;
    private int currID, currCash, totalCash, dailyCash, currAmmount,
            numOfProduct;
    private InputProducts pi = null;
    private Clock clock = null;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();

        products = new Product[SIZE];

        fun_mode = star_pressed = product_selected = time_show =
                progOK = error_detected = minus_pressed =
                printer_printed_account = false;

        currCash = totalCash = dailyCash = currAmmount = numOfProduct = 0;

        currID = -1;

        clock = new Clock(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaSerial = new javax.swing.JTextArea();
        bZero = new javax.swing.JButton();
        bPlus = new javax.swing.JButton();
        bStar = new javax.swing.JButton();
        bEight = new javax.swing.JButton();
        bNine = new javax.swing.JButton();
        bSeven = new javax.swing.JButton();
        bSix = new javax.swing.JButton();
        bC = new javax.swing.JButton();
        bEqual = new javax.swing.JButton();
        display = new javax.swing.JTextField();
        bHash = new javax.swing.JButton();
        bFive = new javax.swing.JButton();
        bThree = new javax.swing.JButton();
        bTwo = new javax.swing.JButton();
        bOne = new javax.swing.JButton();
        bFour = new javax.swing.JButton();
        bF = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaPrinter = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bProg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CASH REGISTER");
        setBounds(new java.awt.Rectangle(400, 300, 0, 0));
        setResizable(false);

        jtaSerial.setColumns(20);
        jtaSerial.setEditable(false);
        jtaSerial.setRows(5);
        jScrollPane1.setViewportView(jtaSerial);

        bZero.setText("0");
        bZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bZeroActionPerformed(evt);
            }
        });

        bPlus.setText("+");
        bPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlusActionPerformed(evt);
            }
        });

        bStar.setText("*");
        bStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStarActionPerformed(evt);
            }
        });

        bEight.setText("8");
        bEight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEightActionPerformed(evt);
            }
        });

        bNine.setText("9");
        bNine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNineActionPerformed(evt);
            }
        });

        bSeven.setText("7");
        bSeven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSevenActionPerformed(evt);
            }
        });

        bSix.setText("6");
        bSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSixActionPerformed(evt);
            }
        });

        bC.setText("C");
        bC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCActionPerformed(evt);
            }
        });

        bEqual.setText("=");
        bEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEqualActionPerformed(evt);
            }
        });

        display.setEditable(false);
        display.setText("WAITING");
        

        bHash.setText("#");
        bHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHashActionPerformed(evt);
            }
        });

        bFive.setText("5");
        bFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFiveActionPerformed(evt);
            }
        });

        bThree.setText("3");
        bThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bThreeActionPerformed(evt);
            }
        });

        bTwo.setText("2");
        bTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTwoActionPerformed(evt);
            }
        });

        bOne.setText("1");
        bOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOneActionPerformed(evt);
            }
        });
        

        bFour.setText("4");
        bFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFourActionPerformed(evt);
            }
        });

        bF.setText("F");
        bF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFActionPerformed(evt);
            }
        });

        jtaPrinter.setColumns(20);
        jtaPrinter.setEditable(false);
        jtaPrinter.setRows(5);
        jScrollPane2.setViewportView(jtaPrinter);

        jLabel1.setText("Serial");

        jLabel2.setText("Printer");

        bProg.setText("Programming");
        bProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bOne)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bTwo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bThree)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bF))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bStar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bZero)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bHash))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bSeven)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bEight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bNine)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bEqual)
                                    .addComponent(bPlus)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bFour)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bFive)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSix)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bC))
                            .addComponent(display))
                        .addGap(18, 42, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(bProg, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bOne)
                            .addComponent(bTwo)
                            .addComponent(bThree)
                            .addComponent(bF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bFour)
                            .addComponent(bFive)
                            .addComponent(bSix)
                            .addComponent(bC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bSeven)
                            .addComponent(bEight)
                            .addComponent(bNine)
                            .addComponent(bPlus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bEqual)
                            .addComponent(bStar)
                            .addComponent(bZero)
                            .addComponent(bHash))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(bProg))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bZeroActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;

            if (fun_mode) {
                serialSend();
                fun_mode = false;
                time_show = true;
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 0;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 0;

                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bZeroActionPerformed

    private void bPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlusActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            clearPrinter();
            if (fun_mode){
                display.setText(msgERROR);
                waitC();
            } else if (product_selected) {
                String show = msgACCOUNT;

                if (star_pressed) {
                    if (currAmmount != 0) {
                        currCash += products[currID].price * currAmmount;
                        dailyCash += products[currID].price * currAmmount;
                        totalCash += products[currID].price * currAmmount;

                        products[currID].sold += currAmmount;

                        show += " " + currCash;
                        display.setText(show);

                        printerPrint();
                    } else {
                        display.setText(msgERROR);
                        waitC();
                    }

                } else {
                    currCash += products[currID].price;
                    dailyCash += products[currID].price;
                    totalCash += products[currID].price;

                    products[currID].sold += 1;

                    show += " " + currCash;
                    display.setText(show);

                    printerPrint();
                }



                currAmmount = 0;
                currID = -1;
                product_selected = false;

                star_pressed = false;
            } else {
                display.setText(msgERROR);
                waitC();
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bPlusActionPerformed

    private void bStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStarActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (currID != -1) {
                star_pressed = true;

                display.setText(msgAMOUNT);
            } else {
                display.setText(msgERROR);
                waitC();
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bStarActionPerformed

    private void bEightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEightActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 8;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 8;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bEightActionPerformed

    private void bNineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNineActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 9;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 9;

                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {

                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bNineActionPerformed

    private void bSevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSevenActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 7;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 7;


                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {

                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bSevenActionPerformed

    private void bSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSixActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 6;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 6;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bSixActionPerformed

    private void bCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            if (fun_mode) {
                fun_mode = false;

                time_show = true;
            } else if (star_pressed) {
                display.setText(msgNEW_AMOUNT);
                currAmmount = 0;
            } else if (error_detected) {
                error_detected = false;

                buttonsRestore();
            }
            buttonsRestore();

        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bCActionPerformed

    private void bEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEqualActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            clearPrinter();
            if (!fun_mode) {
                jtaPrinter.append("==========================\n" + msgACCOUNT + "   " + currCash);
                display.setText(msgACCOUNT + "  " + currCash);

                currCash = 0;
                currAmmount = 0;
                currID = -1;
                product_selected = false;
                time_show = printer_printed_account = true;
            } else {
                display.setText(msgERROR);
                waitC();
            }

        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bEqualActionPerformed

    private void bHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHashActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            clearPrinter();
            if (product_selected) {
                String show = msgACCOUNT;

                minus_pressed = true;

                if (star_pressed) {
                    if (currAmmount != 0) {
                        currCash -= products[currID].price * currAmmount;
                        dailyCash -= products[currID].price * currAmmount;
                        totalCash -= products[currID].price * currAmmount;

                        products[currID].sold -= currAmmount;

                        show += " " + currCash;
                        display.setText(show);

                        printerPrint();
                    } else {
                        display.setText(msgERROR);
                        waitC();
                    }
                } else {
                    currCash -= products[currID].price;
                    dailyCash -= products[currID].price;
                    totalCash -= products[currID].price;

                    products[currID].sold -= 1;

                    show += " " + currCash;
                    display.setText(show);

                    printerPrint();
                }

                currAmmount = 0;
                currID = -1;
                product_selected = false;

                star_pressed = false;
                minus_pressed = false;
            } else {
                display.setText(msgERROR);
                waitC();
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bHashActionPerformed

    private void bFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFiveActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 5;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 5;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bFiveActionPerformed

    private void bThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bThreeActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {

                fun_mode = false;
                time_show = true;
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 3;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 3;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bThreeActionPerformed

    private void bTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTwoActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgTOTAL + " " + totalCash);
                fun_mode = false;
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 2;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 2;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bTwoActionPerformed

    private void bOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOneActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                fun_mode = false;

                jtaPrinter.setText("");
                for (int i = 0; i < numOfProduct; i++) {
                    if (products[i].sold != 0) {
                        jtaPrinter.append(products[i].name + "   " + products[i].sold + "\n");
                        products[i].sold = 0;
                    }
                }
                time_show = true;
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 1;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 1;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bOneActionPerformed

    private void bFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFourActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            if (fun_mode) {
                display.setText(msgERROR);
                waitC();
            } else if (star_pressed) {
                currAmmount = currAmmount * 10 + 4;

                String show = products[currID].name + " " + products[currID].price * currAmmount;
                display.setText(show);
            } else {
                product_selected = true;
                setCurrIDtoZero();
                currID = currID * 10 + 4;
                if (currID > numOfProduct - 1) {
                    display.setText(msgNO_ID);
                    waitC();
                } else {
                    String show = products[currID].name + " " + products[currID].price;
                    display.setText(show);
                }
            }
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bFourActionPerformed

    private void bFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFActionPerformed
        // TODO add your handling code here:
        if (progOK) {
            time_show = false;
            display.setText(msgFUNCTION);
            fun_mode = true;
        } else {
            display.setText(msgERROR);
        }
}//GEN-LAST:event_bFActionPerformed

    private void bProgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProgActionPerformed
        // TODO add your handling code here:
        if (pi == null) {
            pi = new InputProducts(this);
        }
        pi.setVisible(true);

        display.setText(msgPROGRAMMING);
    }//GEN-LAST:event_bProgActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bC;
    private javax.swing.JButton bEight;
    private javax.swing.JButton bEqual;
    private javax.swing.JButton bF;
    private javax.swing.JButton bFive;
    private javax.swing.JButton bFour;
    private javax.swing.JButton bHash;
    private javax.swing.JButton bNine;
    private javax.swing.JButton bOne;
    private javax.swing.JButton bPlus;
    private javax.swing.JButton bProg;
    private javax.swing.JButton bSeven;
    private javax.swing.JButton bSix;
    private javax.swing.JButton bStar;
    private javax.swing.JButton bThree;
    private javax.swing.JButton bTwo;
    private javax.swing.JButton bZero;
    private javax.swing.JTextField display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jtaPrinter;
    private javax.swing.JTextArea jtaSerial;
    // End of variables declaration//GEN-END:variables

    private void serialSend() {
        jtaSerial.setText("");
        for (int i = 0; i < numOfProduct; i++) {
            jtaSerial.append(products[i].name + "   " + products[i].sold + "\n");
            products[i].sold = 0;
        }
    }

    private void printerPrint() {
        if (star_pressed) {
            if (minus_pressed) {
                jtaPrinter.append(products[currID].name + "  -" + currAmmount * products[currID].price + "\n");
            } else {
                jtaPrinter.append(products[currID].name + "   " + currAmmount * products[currID].price + "\n");
            }
        } else {
            if (minus_pressed) {
                jtaPrinter.append(products[currID].name + "  -" + products[currID].price + "\n");
            } else {
                jtaPrinter.append(products[currID].name + "   " + products[currID].price + "\n");
            }
        }
    }

    public void setProgOK(boolean progOK) {
        this.progOK = progOK;
    }

    public void addProduct(Product product) {
        products[numOfProduct++] = product;
    }

    public JButton getbProg() {
        return bProg;
    }

    private void waitC() {

        error_detected = true;
        product_selected = false;
        fun_mode = false;

        bF.setEnabled(false);
        bOne.setEnabled(false);
        bTwo.setEnabled(false);
        bThree.setEnabled(false);
        bFour.setEnabled(false);
        bFive.setEnabled(false);
        bSix.setEnabled(false);
        bSeven.setEnabled(false);
        bEight.setEnabled(false);
        bNine.setEnabled(false);
        bZero.setEnabled(false);
        bHash.setEnabled(false);
        bEqual.setEnabled(false);
        bPlus.setEnabled(false);
        bStar.setEnabled(false);

        currID = -1;
    }

    private void buttonsRestore() {
        bF.setEnabled(true);
        bOne.setEnabled(true);
        bTwo.setEnabled(true);
        bThree.setEnabled(true);
        bFour.setEnabled(true);
        bFive.setEnabled(true);
        bSix.setEnabled(true);
        bSeven.setEnabled(true);
        bEight.setEnabled(true);
        bNine.setEnabled(true);
        bZero.setEnabled(true);
        bHash.setEnabled(true);
        bEqual.setEnabled(true);
        bPlus.setEnabled(true);
        bStar.setEnabled(true);

        time_show = true;
    }

    /*
     * sets currID to 0
     * if currID is not yet
     * inputed
     */
    private void setCurrIDtoZero() {
        if (currID == -1) {
            currID = 0;
        }
    }

    public boolean isTime_show() {
        return time_show;
    }

    public void setTime_show(boolean time_show) {
        this.time_show = time_show;
    }

    public void setDisplayText(String text) {
        display.setText(text);
    }

    /*
     * clears printer area when new bill
     * is formed, only when first product
     * is added on the account
     */
    private void clearPrinter(){
        if(printer_printed_account){
            printer_printed_account = false;
            jtaPrinter.setText("");
        }
    }
}
